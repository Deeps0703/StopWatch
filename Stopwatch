<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Timer</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <h1 id="myh1">Stop Watch</h1>
    <div id="container">
        <div id="display">
           00:00:00:00
        </div>
        <div id="controls">
            <button id="startbtn" onclick="start()">Start</button>
            <button id="stopbtn" onclick="stop()">Stop</button>
            <button id="resetbtn" onclick="reset()">Reset</button>
        </div>
    </div>

    <script src="intex.js"></script>
</body>

</html>
body{
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: beige;
    margin: 40px;
}
#myh1{
    font-size: 4rem;
    font-family: Georgia, 'Times New Roman', Times, serif;
    color:black;
}
#container{
    display: flex;
    flex-direction: column;
    align-items: center;
    border: 5px solid;
    border-radius: 50px;
    background-color: white;
    border-color: skyblue;
    padding: 30px;
    font-size: larger;
}
#display{
    font-size: 5rem;
    font-family: monospace;
    font-weight: bold;
    color: hsla(0, 0%, 0%, 0.74);
    text-shadow: 2px 2px 2px hsla(0, 0%, 0%, 0.74);
    margin-bottom: 25px;
}
#controls button{
    font-size: 1.5rem;
    font-weight: bold;
    padding: 10px 20px;
    margin: 5px;
    min-width: 125px;
    border-radius: 10px;
    cursor: pointer;
    color: white;
    transition: background-color 0.5s ease;
}
#startbtn{
    background-color: hsl(120, 100%, 50%);
}
#startbtn:hover{
    background-color: hsl(120, 100%, 30%);
}
#stopbtn{
    background-color: hsl(0, 100%, 50%);
}#stopbtn:hover{
    background-color: hsl(0, 100%, 20%);
}
#resetbtn{
    background-color: hsl(60, 100%, 50%);
}
#resetbtn:hover{
    background-color: hsl(60, 100%, 30%);
}
const display = document.getElementById("display");
let timer = null;
let startTime = 0;
let elapsedTime = 0;
let isRunning = false;

function start() {
    if (!isRunning) {
        startTime = Date.now() - elapsedTime;
        timer = setInterval(update, 10);
        isRunning = true;
    }
}

function stop() {
    if (isRunning) {
        clearInterval(timer);
        elapsedTime = Date.now() - startTime;
        isRunning = false;
    }
}

function reset() {
    clearInterval(timer);
    startTime = 0;
    elapsedTime = 0;
    isRunning = false;
    display.textContent = "00:00:00:00";
}

function update() {
    const currentTime = Date.now();
    elapsedTime = currentTime - startTime;

    let hours = Math.floor(elapsedTime / (1000 * 60 * 60));
    let minutes = Math.floor((elapsedTime / (1000 * 60)) % 60);
    let seconds = Math.floor((elapsedTime / 1000) % 60);
    let milliseconds = Math.floor((elapsedTime % 1000) / 10);

    hours = String(hours).padStart(2, "0");
    minutes = String(minutes).padStart(2, "0");
    seconds = String(seconds).padStart(2, "0");
    milliseconds = String(milliseconds).padStart(2, "0");

    display.textContent = `${hours}:${minutes}:${seconds}:${milliseconds}`;
}
